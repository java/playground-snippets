// Primitive Pattern Matching for InstanceOf
record JsonDouble(double d) {}
record JsonFloat(float f) {}
record JsonLong(long i) {}
record JsonInt(int i) {}

void analyze(Object o) {
    if (o instanceof JsonDouble(double d)) {
        System.out.println("o is wrapping a double " + d);
    } else if (o instanceof JsonLong(long l)) {
        System.out.println("o is wrapping a long " + l);
    } else if (o instanceof JsonInt(int i)) {
        System.out.println("o is wrapping an int " + i);
    } else {
        System.out.println("Unrecognized wrapper " + o);
    }
}

var jsonDouble = new JsonDouble(Math.PI);
analyze(jsonDouble);
var jsonFloat = new JsonFloat((float)Math.PI);
analyze(jsonFloat);
var jsonLong = new JsonLong(314L);
analyze(jsonLong);
var jsonInt = new JsonInt(31);
analyze(jsonInt);


// Snippet 2
// Title: Primitive Pattern Matching for Switch
sealed interface JsonNumber permits
      JsonDouble, JsonFloat, JsonLong, JsonInt {}
record JsonDouble(double d) implements JsonNumber {}
record JsonFloat(float f) implements JsonNumber {}
record JsonLong(long i) implements JsonNumber {}
record JsonInt(int i) implements JsonNumber {}

void analyze(JsonNumber jsonNumber) {
    switch(jsonNumber) {
        case JsonDouble(double d) -> System.out.println("Double: " + d);
        case JsonFloat(float f) -> System.out.println("Float: " + f);
        case JsonLong(long l) -> System.out.println("Long: " + l);
        case JsonInt(int i) -> System.out.println("Int: " + i);
    }
}

JsonNumber jsonNumber = new JsonDouble(Math.PI);
analyze(jsonNumber);
jsonNumber = new JsonFloat((float)Math.PI);
analyze(jsonNumber);
jsonNumber = new JsonLong(314L);
analyze(jsonNumber);
jsonNumber = new JsonInt(31);
analyze(jsonNumber);


// Snippet 3
// Title: Narrowing Integer Number Primitive Pattern
sealed interface JsonNumber
    permits JsonLong, JsonInt, JsonChar, JsonByte {}
record JsonLong(long l) implements JsonNumber {}
record JsonInt(int i) implements JsonNumber {}
record JsonChar(char i) implements JsonNumber {}
record JsonByte(byte i) implements JsonNumber {}

JsonNumber narrow(long number) {
    return switch (number) {
      case byte b -> new JsonByte(b);
      case char c -> new JsonChar(c);
      case int  i -> new JsonInt(i);
      case long l -> new JsonLong(l);
    };
}

System.out.println("Narrowing to byte " + narrow(10L));
System.out.println("Narrowing to char " + narrow(200L));
System.out.println("Narrowing to int " + narrow(0x80000));
System.out.println("Not narrowing " + narrow(0x80000000L));


// Snippet 4
// Title: Narrowing Floating Point Number Primitive Pattern
sealed interface JsonNumber
    permits JsonDouble, JsonFloat {}
record JsonDouble(double d) implements JsonNumber {}
record JsonFloat(float f) implements JsonNumber {}

JsonNumber narrow(double number) {
    return switch (number) {
      case float f -> new JsonFloat(f);
      case double d -> new JsonDouble(d);
    };
}

System.out.println("Narrowing to float " + narrow(3.0d));
System.out.println("Not Narrowing " + narrow(3.14d));
System.out.println("Not Narrowing " + narrow(Math.PI));


// Snippet 5
// Title: Integer Number to Floating Point Number Primitive Pattern
sealed interface JsonNumber
        permits JsonDouble, JsonFloat, JsonInt {}
record JsonDouble(double d) implements JsonNumber {}
record JsonFloat(float f) implements JsonNumber {}
record JsonInt(int i) implements JsonNumber {}

JsonNumber narrow(int number) {
    return switch (number) {
      case float f -> new JsonFloat(f);
      case double d -> new JsonDouble(d);
    };
}

System.out.println("Int to float: " + narrow(10));
System.out.println("Int to double: " + narrow(0x1000001));


// Snippet 6
// Title: Floating Point Number to Integer Number Primitive Pattern
sealed interface JsonNumber
    permits JsonDouble, JsonFloat, JsonInt, JsonByte {}
record JsonDouble(double d) implements JsonNumber {}
record JsonFloat(float f) implements JsonNumber {}
record JsonInt(int i) implements JsonNumber {}
record JsonByte(byte b) implements JsonNumber {}

JsonNumber narrow(float number) {
    return switch (number) {
      case byte b -> new JsonByte(b);
      case int i -> new JsonInt(i);
      case float f -> new JsonFloat(f);
    };
}

System.out.println("Float to byte: " + narrow(10f));
System.out.println("Float to int: " + narrow(1_000f));
System.out.println("Cant convert: " + narrow(3.14f));


// Snippet 7
// Title: Double Number to Integer Number Primitive Pattern
sealed interface JsonNumber
    permits JsonDouble, JsonLong, JsonInt, JsonByte {}
record JsonDouble(double d) implements JsonNumber {}
record JsonLong(long l) implements JsonNumber {}
record JsonInt(int i) implements JsonNumber {}
record JsonByte(byte b) implements JsonNumber {}

JsonNumber narrow(double number) {
    return switch (number) {
      case byte b -> new JsonByte(b);
      case int i -> new JsonInt(i);
      case long l -> new JsonLong(l);
      case double d -> new JsonDouble(d);
    };
}

System.out.println("Double to byte: " + narrow(10d));
System.out.println("Double to int: " + narrow(1_000d));
System.out.println("Double to long: " + narrow(8_000_000_000d));
System.out.println("Cant convert: " + narrow(3.14d));


// Snippet 8
// Title: Boolean Primitive Pattern
sealed interface JsonBoolean
    permits JsonTrue, JsonFalse {}
record JsonTrue() implements JsonBoolean {}
record JsonFalse() implements JsonBoolean {}

JsonBoolean box(boolean value) {
    return switch (value) {
      case true -> new JsonTrue();
      case false -> new JsonFalse();
    };
}

System.out.println("Boxing true: " + box(true));
System.out.println("Boxing false: " + box(false));


// Snippet 9
// Title: Double Primitive Pattern
sealed interface JsonDouble
    permits JsonZero, JsonNegative, JsonPositive {}
record JsonZero() implements JsonDouble {}
record JsonPositive() implements JsonDouble {}
record JsonNegative() implements JsonDouble {}

JsonDouble box(double value) {
    return switch (value) {
      case 0d -> new JsonZero();
      case double v when v > 0d -> new JsonPositive();
      case double v -> new JsonNegative();
    };
}

System.out.println("Boxing 0d: " + box(0d));
System.out.println("Boxing 10d: " + box(10d));
System.out.println("Boxing -10d: " + box(-10d));
